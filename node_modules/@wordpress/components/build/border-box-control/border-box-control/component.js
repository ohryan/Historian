"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _borderBoxControlLinkedButton = _interopRequireDefault(require("../border-box-control-linked-button"));

var _borderBoxControlSplitControls = _interopRequireDefault(require("../border-box-control-split-controls"));

var _borderControl = require("../../border-control");

var _hStack = require("../../h-stack");

var _baseControlStyles = require("../../base-control/styles/base-control-styles");

var _view = require("../../view");

var _visuallyHidden = require("../../visually-hidden");

var _context = require("../../ui/context");

var _hook = require("./hook");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const BorderLabel = props => {
  const {
    label,
    hideLabelFromVision
  } = props;

  if (!label) {
    return null;
  }

  return hideLabelFromVision ? (0, _element.createElement)(_visuallyHidden.VisuallyHidden, {
    as: "label"
  }, label) : (0, _element.createElement)(_baseControlStyles.StyledLabel, null, label);
};

const BorderBoxControl = (props, forwardedRef) => {
  const {
    className,
    colors,
    disableCustomColors,
    enableAlpha,
    enableStyle,
    hasMixedBorders,
    hideLabelFromVision,
    isLinked,
    label,
    linkedControlClassName,
    linkedValue,
    onLinkedChange,
    onSplitChange,
    popoverPlacement,
    popoverOffset,
    splitValue,
    toggleLinked,
    __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar,
    __next36pxDefaultSize = false,
    ...otherProps
  } = (0, _hook.useBorderBoxControl)(props);
  const containerRef = (0, _element.useRef)();
  const mergedRef = (0, _compose.useMergeRefs)([containerRef, forwardedRef]);
  const popoverProps = popoverPlacement ? {
    placement: popoverPlacement,
    offset: popoverOffset,
    anchorRef: containerRef,
    __unstableShift: true
  } : undefined;
  return (0, _element.createElement)(_view.View, (0, _extends2.default)({
    className: className
  }, otherProps, {
    ref: mergedRef
  }), (0, _element.createElement)(BorderLabel, {
    label: label,
    hideLabelFromVision: hideLabelFromVision
  }), (0, _element.createElement)(_hStack.HStack, {
    alignment: 'start',
    expanded: true,
    spacing: 0
  }, isLinked ? (0, _element.createElement)(_borderControl.BorderControl, {
    className: linkedControlClassName,
    colors: colors,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    enableStyle: enableStyle,
    onChange: onLinkedChange,
    placeholder: hasMixedBorders ? (0, _i18n.__)('Mixed') : undefined,
    __unstablePopoverProps: popoverProps,
    shouldSanitizeBorder: false // This component will handle that.
    ,
    value: linkedValue,
    withSlider: true,
    width: '110px',
    __experimentalHasMultipleOrigins: __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar,
    __next36pxDefaultSize: __next36pxDefaultSize
  }) : (0, _element.createElement)(_borderBoxControlSplitControls.default, {
    colors: colors,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    enableStyle: enableStyle,
    onChange: onSplitChange,
    popoverPlacement: popoverPlacement,
    popoverOffset: popoverOffset,
    value: splitValue,
    __experimentalHasMultipleOrigins: __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar,
    __next36pxDefaultSize: __next36pxDefaultSize
  }), (0, _element.createElement)(_borderBoxControlLinkedButton.default, {
    onClick: toggleLinked,
    isLinked: isLinked,
    __next36pxDefaultSize: __next36pxDefaultSize
  })));
};

const ConnectedBorderBoxControl = (0, _context.contextConnect)(BorderBoxControl, 'BorderBoxControl');
var _default = ConnectedBorderBoxControl;
exports.default = _default;
//# sourceMappingURL=component.js.map