/// <reference types="react" />
export declare const Day: import("@emotion/styled").StyledComponent<Omit<import("../../flex/types").FlexProps, "align" | "gap"> & {
    alignment?: "top" | "bottom" | "left" | "right" | "center" | "end" | (string & {}) | "baseline" | "inherit" | "initial" | "start" | "-moz-initial" | "revert" | "unset" | "normal" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "edge" | undefined;
    spacing?: import("csstype").Property.Width<string | number> | undefined;
} & {
    alignment?: "top" | "bottom" | "left" | "right" | "center" | "end" | (string & {}) | "baseline" | "inherit" | "initial" | "start" | "-moz-initial" | "revert" | "unset" | "normal" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "edge" | undefined;
    spacing?: import("csstype").Property.Width<string | number> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | "as" | "direction" | "spacing" | "justify" | "wrap" | "expanded" | "isReversed" | "alignment"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
} & {
    hasEvents: boolean;
}, {}, {}>;
export declare const NavPrevButton: import("@emotion/styled").StyledComponent<Pick<any, string | number | symbol> & import("react").RefAttributes<any> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const NavNextButton: import("@emotion/styled").StyledComponent<Pick<any, string | number | symbol> & import("react").RefAttributes<any> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map