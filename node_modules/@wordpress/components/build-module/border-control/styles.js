function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/**
 * External dependencies
 */
import { css } from '@emotion/react';

/**
 * Internal dependencies
 */
import { COLORS, CONFIG, rtl } from '../utils';
import { space } from '../ui/utils/space';
import { StyledField, StyledLabel } from '../base-control/styles/base-control-styles';
import { BackdropUI } from '../input-control/styles/input-control-styles';
import { Root as UnitControlWrapper, UnitSelect } from '../unit-control/styles/unit-control-styles';
const labelStyles = process.env.NODE_ENV === "production" ? {
  name: "f3vz0n",
  styles: "font-weight:500"
} : {
  name: "rst95r-labelStyles",
  styles: "font-weight:500;label:labelStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const focusBoxShadow = /*#__PURE__*/css("box-shadow:inset 0 0 0 ", CONFIG.borderWidth, " ", COLORS.ui.borderFocus, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:focusBoxShadow;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const borderControl = process.env.NODE_ENV === "production" ? {
  name: "bjn8wh",
  styles: "position:relative"
} : {
  name: "1aimwta-borderControl",
  styles: "position:relative;label:borderControl;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
export const innerWrapper = () => /*#__PURE__*/css("flex:1 0 40%;background:#fff;", UnitControlWrapper, "{flex:1;", rtl({
  marginLeft: -1
})(), ";}&& ", UnitSelect, "{min-height:0;", rtl({
  borderRadius: '0 1px 1px 0',
  marginRight: 0
}, {
  borderRadius: '1px 0 0 1px',
  marginLeft: 0
})(), " transition:box-shadow 0.1s linear,border 0.1s linear;&:focus{z-index:1;", focusBoxShadow, " border:1px solid ", COLORS.ui.borderFocus, ";}}" + (process.env.NODE_ENV === "production" ? "" : ";label:innerWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const wrapperWidth = width => {
  return /*#__PURE__*/css("width:", width, ";flex:0 0 auto;" + (process.env.NODE_ENV === "production" ? "" : ";label:wrapperWidth;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
/*
 * When default control height is 36px the following should be removed.
 * See: InputControl and __next36pxDefaultSize.
 */

export const wrapperHeight = __next36pxDefaultSize => {
  return /*#__PURE__*/css("height:", __next36pxDefaultSize ? '36px' : '30px', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:wrapperHeight;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const borderControlDropdown = () => /*#__PURE__*/css("background:#fff;&&>button{height:100%;padding:", space(0.75), ";", rtl({
  borderRadius: `2px 0 0 2px`
}, {
  borderRadius: `0 2px 2px 0`
})(), " border:", CONFIG.borderWidth, " solid ", COLORS.ui.border, ";position:relative;&:focus,&:hover:not( :disabled ){", focusBoxShadow, " border-color:", COLORS.ui.borderFocus, ";z-index:1;position:relative;}}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderControlDropdown;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const colorIndicatorBorder = border => {
  const {
    color,
    style
  } = border || {};
  const fallbackColor = !!style && style !== 'none' ? COLORS.gray[300] : undefined;
  return /*#__PURE__*/css("border-style:", style === 'none' ? 'solid' : style, ";border-color:", color || fallbackColor, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:colorIndicatorBorder;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref = process.env.NODE_ENV === "production" ? {
  name: "6g24ce",
  styles: "height:16px;width:16px"
} : {
  name: "ux5246-colorIndicatorWrapper",
  styles: "height:16px;width:16px;label:colorIndicatorWrapper;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYm9yZGVyLWNvbnRyb2wvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJKUyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2JvcmRlci1jb250cm9sL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIHJ0bCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdWkvdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHtcblx0U3R5bGVkRmllbGQsXG5cdFN0eWxlZExhYmVsLFxufSBmcm9tICcuLi9iYXNlLWNvbnRyb2wvc3R5bGVzL2Jhc2UtY29udHJvbC1zdHlsZXMnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB7XG5cdFJvb3QgYXMgVW5pdENvbnRyb2xXcmFwcGVyLFxuXHRVbml0U2VsZWN0LFxufSBmcm9tICcuLi91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbXBvcnQgdHlwZSB7IEJvcmRlciB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBsYWJlbFN0eWxlcyA9IGNzc2Bcblx0Zm9udC13ZWlnaHQ6IDUwMDtcbmA7XG5cbmNvbnN0IGZvY3VzQm94U2hhZG93ID0gY3NzYFxuXHRib3gtc2hhZG93OiBpbnNldCAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sID0gY3NzYFxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5leHBvcnQgY29uc3QgaW5uZXJXcmFwcGVyID0gKCkgPT4gY3NzYFxuXHRmbGV4OiAxIDAgNDAlO1xuXG5cdC8qXG5cdCAqIE5lZWRzIG1vcmUgdGhvdWdodC4gQWltIGlzIHRvIHByZXZlbnQgdGhlIGJvcmRlciBmb3IgQm9yZGVyQm94Q29udHJvbFxuXHQgKiBzaG93aW5nIHRocm91Z2ggdGhlIGNvbnRyb2wuIExpa2VseSBuZWVkcyB0byB0YWtlIGludG8gYWNjb3VudFxuXHQgKiBsaWdodC9kYXJrIHRoZW1lcyBldGMuXG5cdCAqL1xuXHRiYWNrZ3JvdW5kOiAjZmZmO1xuXG5cdC8qXG5cdCAqIEZvcmNlcyB0aGUgd2lkdGggY29udHJvbCB0byBmaWxsIGF2YWlsYWJsZSBzcGFjZSBnaXZlbiBVbml0Q29udHJvbFxuXHQgKiBwYXNzZXMgaXRzIGNsYXNzTmFtZSBkaXJlY3RseSB0aHJvdWdoIHRvIHRoZSBpbnB1dC5cblx0ICovXG5cdCR7IFVuaXRDb250cm9sV3JhcHBlciB9IHtcblx0XHRmbGV4OiAxO1xuXHRcdCR7IHJ0bCggeyBtYXJnaW5MZWZ0OiAtMSB9ICkoKSB9XG5cdH1cblxuXHQmJiAkeyBVbml0U2VsZWN0IH0ge1xuXHRcdC8qIFByZXZlbnQgZGVmYXVsdCBzdHlsZXMgZm9yY2luZyBoZWlnaHRzIGxhcmdlciB0aGFuIEJvcmRlckNvbnRyb2wgKi9cblx0XHRtaW4taGVpZ2h0OiAwO1xuXHRcdCR7IHJ0bChcblx0XHRcdHtcblx0XHRcdFx0Ym9yZGVyUmFkaXVzOiAnMCAxcHggMXB4IDAnLFxuXHRcdFx0XHRtYXJnaW5SaWdodDogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGJvcmRlclJhZGl1czogJzFweCAwIDAgMXB4Jyxcblx0XHRcdFx0bWFyZ2luTGVmdDogMCxcblx0XHRcdH1cblx0XHQpKCkgfVxuXHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXIsIGJvcmRlciAwLjFzIGxpbmVhcjtcblxuXHRcdCY6Zm9jdXMge1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdCR7IGZvY3VzQm94U2hhZG93IH1cblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJXaWR0aCA9ICggd2lkdGg6IENTU1Byb3BlcnRpZXNbICd3aWR0aCcgXSApID0+IHtcblx0cmV0dXJuIGNzc2Bcblx0XHR3aWR0aDogJHsgd2lkdGggfTtcblx0XHRmbGV4OiAwIDAgYXV0bztcblx0YDtcbn07XG5cbi8qXG4gKiBXaGVuIGRlZmF1bHQgY29udHJvbCBoZWlnaHQgaXMgMzZweCB0aGUgZm9sbG93aW5nIHNob3VsZCBiZSByZW1vdmVkLlxuICogU2VlOiBJbnB1dENvbnRyb2wgYW5kIF9fbmV4dDM2cHhEZWZhdWx0U2l6ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZXJIZWlnaHQgPSAoIF9fbmV4dDM2cHhEZWZhdWx0U2l6ZT86IGJvb2xlYW4gKSA9PiB7XG5cdHJldHVybiBjc3NgXG5cdFx0aGVpZ2h0OiAkeyBfX25leHQzNnB4RGVmYXVsdFNpemUgPyAnMzZweCcgOiAnMzBweCcgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sRHJvcGRvd24gPSAoKSA9PiBjc3NgXG5cdGJhY2tncm91bmQ6ICNmZmY7XG5cblx0JiYgPiBidXR0b24ge1xuXHRcdC8qXG5cdFx0ICogT3ZlcnJpZGUgYnV0dG9uIGNvbXBvbmVudCBoZWlnaHQgYW5kIHBhZGRpbmcgdG8gZml0IHdpdGhpblxuXHRcdCAqIEJvcmRlckNvbnRyb2xcblx0XHQgKi9cblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0cGFkZGluZzogJHsgc3BhY2UoIDAuNzUgKSB9O1xuXHRcdCR7IHJ0bChcblx0XHRcdHsgYm9yZGVyUmFkaXVzOiBgMnB4IDAgMCAycHhgIH0sXG5cdFx0XHR7IGJvcmRlclJhZGl1czogYDAgMnB4IDJweCAwYCB9XG5cdFx0KSgpIH1cblx0XHRib3JkZXI6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXIgfTtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0XHQmOmZvY3VzLFxuXHRcdCY6aG92ZXI6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHQkeyBmb2N1c0JveFNoYWRvdyB9XG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0ei1pbmRleDogMTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvckJvcmRlciA9ICggYm9yZGVyPzogQm9yZGVyICkgPT4ge1xuXHRjb25zdCB7IGNvbG9yLCBzdHlsZSB9ID0gYm9yZGVyIHx8IHt9O1xuXG5cdGNvbnN0IGZhbGxiYWNrQ29sb3IgPVxuXHRcdCEhIHN0eWxlICYmIHN0eWxlICE9PSAnbm9uZScgPyBDT0xPUlMuZ3JheVsgMzAwIF0gOiB1bmRlZmluZWQ7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRib3JkZXItc3R5bGU6ICR7IHN0eWxlID09PSAnbm9uZScgPyAnc29saWQnIDogc3R5bGUgfTtcblx0XHRib3JkZXItY29sb3I6ICR7IGNvbG9yIHx8IGZhbGxiYWNrQ29sb3IgfTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xvckluZGljYXRvcldyYXBwZXIgPSAoXG5cdGJvcmRlcj86IEJvcmRlcixcblx0X19uZXh0MzZweERlZmF1bHRTaXplPzogYm9vbGVhblxuKSA9PiB7XG5cdGNvbnN0IHsgc3R5bGUgfSA9IGJvcmRlciB8fCB7fTtcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGJvcmRlci1yYWRpdXM6IDk5OTlweDtcblx0XHRib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHQkeyBzdHlsZSA/IGNvbG9ySW5kaWNhdG9yQm9yZGVyKCBib3JkZXIgKSA6IHVuZGVmaW5lZCB9XG5cdFx0d2lkdGg6ICR7IF9fbmV4dDM2cHhEZWZhdWx0U2l6ZSA/ICcyOHB4JyA6ICcyMnB4JyB9O1xuXHRcdGhlaWdodDogJHsgX19uZXh0MzZweERlZmF1bHRTaXplID8gJzI4cHgnIDogJzIycHgnIH07XG5cdFx0cGFkZGluZzogJHsgX19uZXh0MzZweERlZmF1bHRTaXplID8gJzJweCcgOiAnMXB4JyB9O1xuXG5cdFx0Lypcblx0XHQgKiBDb2xvckluZGljYXRvclxuXHRcdCAqXG5cdFx0ICogVGhlIHRyYW5zcGFyZW50IGNvbG9ycyB1c2VkIGhlcmUgZW5zdXJlIHZpc2liaWxpdHkgb2YgdGhlIGluZGljYXRvclxuXHRcdCAqIG92ZXIgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYm9yZGVyIGNvbnRyb2wgZHJvcGRvd24ncyB0b2dnbGUgYnV0dG9uLlxuXHRcdCAqL1xuXHRcdCYgPiBzcGFuIHtcblx0XHRcdCR7ICEgX19uZXh0MzZweERlZmF1bHRTaXplXG5cdFx0XHRcdD8gY3NzYFxuXHRcdFx0XHRcdFx0LyogRGltZW5zaW9ucyBmaXQgaW4gMzBweCBvdmVyYWxsIGNvbnRyb2wgaGVpZ2h0LiAqL1xuXHRcdFx0XHRcdFx0aGVpZ2h0OiAxNnB4O1xuXHRcdFx0XHRcdFx0d2lkdGg6IDE2cHg7XG5cdFx0XHRcdCAgYFxuXHRcdFx0XHQ6ICcnIH1cblx0XHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcblx0XHRcdFx0LTQ1ZGVnLFxuXHRcdFx0XHR0cmFuc3BhcmVudCA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA0OCUsXG5cdFx0XHRcdHJnYiggMCAwIDAgLyAyMCUgKSA1MiUsXG5cdFx0XHRcdHRyYW5zcGFyZW50IDUyJVxuXHRcdFx0KTtcblx0XHR9XG5cdGA7XG59O1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXIgPSBjc3NgXG5cdC8qIFJlbW92ZSBwYWRkaW5nIGZyb20gY29udGVudCwgdGhpcyB3aWxsIGJlIHJlLWFkZGVkIHZpYSBpbm5lciBlbGVtZW50cyovXG5cdCYmIC5jb21wb25lbnRzLXBvcG92ZXJfX2NvbnRlbnQge1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0d2lkdGg6IDI2NHB4O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgYm9yZGVyQ29udHJvbFBvcG92ZXJDb250cm9scyA9IGNzc2Bcblx0cGFkZGluZzogJHsgc3BhY2UoIDIgKSB9O1xuXG5cdD4gZGl2OmZpcnN0LW9mLXR5cGUgPiAkeyBTdHlsZWRMYWJlbCB9IHtcblx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHRcdCR7IGxhYmVsU3R5bGVzIH1cblx0fVxuXG5cdCYmICR7IFN0eWxlZExhYmVsIH0gKyBidXR0b246bm90KCAuaGFzLXRleHQgKSB7XG5cdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sUG9wb3ZlckNvbnRlbnQgPSBjc3NgYDtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvckluZGljYXRvciA9IGNzc2BgO1xuXG5leHBvcnQgY29uc3QgcmVzZXRCdXR0b24gPSBjc3NgXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHR3aWR0aDogMTAwJTtcblxuXHQvKiBPdmVycmlkZSBidXR0b24gY29tcG9uZW50IHN0eWxpbmcgKi9cblx0JiYge1xuXHRcdGJvcmRlci10b3A6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkICR7IENPTE9SUy5ncmF5WyAyMDAgXSB9O1xuXHRcdGhlaWdodDogNDZweDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlcldpZHRoQ29udHJvbCA9ICgpID0+IGNzc2Bcblx0LyogVGFyZ2V0IHRoZSBJbnB1dENvbnRyb2wncyBiYWNrZHJvcCAqL1xuXHQmJiYgJHsgQmFja2Ryb3BVSSB9IHtcblx0XHQkeyBydGwoIHtcblx0XHRcdGJvcmRlclRvcExlZnRSYWRpdXM6IDAsXG5cdFx0XHRib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwLFxuXHRcdH0gKSgpIH1cblx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyO1xuXHR9XG5cblx0LyogU3BlY2lmaWNpdHkgcmVxdWlyZWQgdG8gb3ZlcmNvbWUgVW5pdENvbnRyb2wgcGFkZGluZyAqL1xuXHQvKiBTZWUgcGFja2FnZXMvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzICovXG5cdCYmJiBpbnB1dCB7XG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdSaWdodDogMCB9ICkoKSB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJDb250cm9sU3R5bGVQaWNrZXIgPSBjc3NgXG5cdCR7IFN0eWxlZExhYmVsIH0ge1xuXHRcdCR7IGxhYmVsU3R5bGVzIH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IGJvcmRlclN0eWxlQnV0dG9uID0gY3NzYFxuXHQmJiYmJiB7XG5cdFx0bWluLXdpZHRoOiAzMHB4O1xuXHRcdHdpZHRoOiAzMHB4O1xuXHRcdGhlaWdodDogMzBweDtcblx0XHRwYWRkaW5nOiAzcHg7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBib3JkZXJTbGlkZXIgPSAoKSA9PiBjc3NgXG5cdGZsZXg6IDEgMSA2MCU7XG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogc3BhY2UoIDMgKSB9ICkoKSB9XG5cblx0JHsgU3R5bGVkRmllbGQgfSB7XG5cdFx0bWFyZ2luLWJvdHRvbTogMDtcblx0XHRmb250LXNpemU6IDA7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0fVxuYDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

export const colorIndicatorWrapper = (border, __next36pxDefaultSize) => {
  const {
    style
  } = border || {};
  return /*#__PURE__*/css("border-radius:9999px;border:2px solid transparent;", style ? colorIndicatorBorder(border) : undefined, " width:", __next36pxDefaultSize ? '28px' : '22px', ";height:", __next36pxDefaultSize ? '28px' : '22px', ";padding:", __next36pxDefaultSize ? '2px' : '1px', ";&>span{", !__next36pxDefaultSize ? _ref : '', " background:linear-gradient(\n\t\t\t\t-45deg,\n\t\t\t\ttransparent 48%,\n\t\t\t\trgb( 0 0 0 / 20% ) 48%,\n\t\t\t\trgb( 0 0 0 / 20% ) 52%,\n\t\t\t\ttransparent 52%\n\t\t\t);}" + (process.env.NODE_ENV === "production" ? "" : ";label:colorIndicatorWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const borderControlPopover = process.env.NODE_ENV === "production" ? {
  name: "16nchol",
  styles: "&& .components-popover__content{padding:0;width:264px;}"
} : {
  name: "17bbm07-borderControlPopover",
  styles: "&& .components-popover__content{padding:0;width:264px;};label:borderControlPopover;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
export const borderControlPopoverControls = /*#__PURE__*/css("padding:", space(2), ";>div:first-of-type>", StyledLabel, "{margin-bottom:0;", labelStyles, ";}&& ", StyledLabel, "+button:not( .has-text ){min-width:24px;padding:0;}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderControlPopoverControls;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const borderControlPopoverContent = /*#__PURE__*/css(process.env.NODE_ENV === "production" ? "" : ";label:borderControlPopoverContent;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const borderColorIndicator = /*#__PURE__*/css(process.env.NODE_ENV === "production" ? "" : ";label:borderColorIndicator;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const resetButton = /*#__PURE__*/css("justify-content:center;width:100%;&&{border-top:", CONFIG.borderWidth, " solid ", COLORS.gray[200], ";height:46px;}" + (process.env.NODE_ENV === "production" ? "" : ";label:resetButton;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const borderWidthControl = () => /*#__PURE__*/css("&&& ", BackdropUI, "{", rtl({
  borderTopLeftRadius: 0,
  borderBottomLeftRadius: 0
})(), " transition:box-shadow 0.1s linear;}&&& input{", rtl({
  paddingRight: 0
})(), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderWidthControl;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const borderControlStylePicker = /*#__PURE__*/css(StyledLabel, "{", labelStyles, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderControlStylePicker;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const borderStyleButton = process.env.NODE_ENV === "production" ? {
  name: "1486260",
  styles: "&&&&&{min-width:30px;width:30px;height:30px;padding:3px;}"
} : {
  name: "6r7ylf-borderStyleButton",
  styles: "&&&&&{min-width:30px;width:30px;height:30px;padding:3px;};label:borderStyleButton;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
export const borderSlider = () => /*#__PURE__*/css("flex:1 1 60%;", rtl({
  marginRight: space(3)
})(), " ", StyledField, "{margin-bottom:0;font-size:0;display:flex;}" + (process.env.NODE_ENV === "production" ? "" : ";label:borderSlider;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
//# sourceMappingURL=styles.js.map