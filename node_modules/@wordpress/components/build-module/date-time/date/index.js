import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import moment from 'moment';
// Needed to initialise the default datepicker styles.
// See: https://github.com/airbnb/react-dates#initialize
import 'react-dates/initialize'; // `react-dates` doesn't tree-shake correctly, so we import from the individual
// component here.

import DayPickerSingleDateController from 'react-dates/lib/components/DayPickerSingleDateController';
/**
 * WordPress dependencies
 */

import { useEffect, useRef } from '@wordpress/element';
import { isRTL, _n, sprintf } from '@wordpress/i18n';
import { arrowLeft, arrowRight } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { getMomentDate } from './utils';
import { Day, NavPrevButton, NavNextButton } from './styles';
const TIMEZONELESS_FORMAT = 'YYYY-MM-DDTHH:mm:ss';
const ARIAL_LABEL_TIME_FORMAT = 'dddd, LL';

const noop = () => {};

function DatePickerDay(_ref) {
  let {
    day,
    events = []
  } = _ref;
  const ref = useRef(null);
  /*
   * a11y hack to make the `There is/are n events` string
   * available speaking for readers,
   * re-defining the aria-label attribute.
   * This attribute is handled by the react-dates component.
   */

  useEffect(() => {
    var _ref$current;

    // Bail when no parent node.
    if (!((ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.parentNode) instanceof Element)) {
      return;
    }

    const {
      parentNode
    } = ref.current;
    const dayAriaLabel = moment(day).format(ARIAL_LABEL_TIME_FORMAT);

    if (!events.length) {
      // Set aria-label without event description.
      parentNode.setAttribute('aria-label', dayAriaLabel);
      return;
    }

    const dayWithEventsDescription = sprintf( // translators: 1: Calendar day format, 2: Calendar event number.
    _n('%1$s. There is %2$d event.', '%1$s. There are %2$d events.', events.length), dayAriaLabel, events.length);
    parentNode.setAttribute('aria-label', dayWithEventsDescription);
  }, [day, events.length]);
  return createElement(Day, {
    ref: ref,
    className: "components-datetime__date__day" // Unused, for backwards compatibility.
    ,
    hasEvents: !!(events !== null && events !== void 0 && events.length),
    alignment: "center"
  }, day.format('D'));
}
/**
 * DatePicker is a React component that renders a calendar for date selection.
 *
 * ```jsx
 * import { DatePicker } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const MyDatePicker = () => {
 *   const [ date, setDate ] = useState( new Date() );
 *
 *   return (
 *     <DatePicker
 *       currentDate={ date }
 *       onChange={ ( newDate ) => setDate( newDate ) }
 *     />
 *   );
 * };
 * ```
 */


export function DatePicker(_ref2) {
  let {
    currentDate,
    onChange,
    events,
    isInvalidDate,
    onMonthPreviewed,
    startOfWeek = 0
  } = _ref2;
  const nodeRef = useRef(null);

  const onMonthPreviewedHandler = newMonthDate => {
    onMonthPreviewed === null || onMonthPreviewed === void 0 ? void 0 : onMonthPreviewed(newMonthDate.toISOString());
    keepFocusInside();
  };
  /*
   * Todo: We should remove this function ASAP.
   * It is kept because focus is lost when we click on the previous and next month buttons.
   * This focus loss closes the date picker popover.
   * Ideally we should add an upstream commit on react-dates to fix this issue.
   */


  const keepFocusInside = () => {
    if (!nodeRef.current) {
      return;
    }

    const {
      ownerDocument
    } = nodeRef.current;
    const {
      activeElement
    } = ownerDocument; // If focus was lost.

    if (!activeElement || !nodeRef.current.contains(ownerDocument.activeElement)) {
      // Retrieve the focus region div.
      const focusRegion = nodeRef.current.querySelector('.DayPicker_focusRegion');

      if (!(focusRegion instanceof HTMLElement)) {
        return;
      } // Keep the focus on focus region.


      focusRegion.focus();
    }
  };

  const onChangeMoment = newDate => {
    if (!newDate) {
      return;
    } // If currentDate is null, use now as momentTime to designate hours, minutes, seconds.


    const momentDate = currentDate ? moment(currentDate) : moment();
    const momentTime = {
      hours: momentDate.hours(),
      minutes: momentDate.minutes(),
      seconds: 0
    };
    onChange === null || onChange === void 0 ? void 0 : onChange(newDate.set(momentTime).format(TIMEZONELESS_FORMAT)); // Keep focus on the date picker.

    keepFocusInside();
  };

  const getEventsPerDay = day => {
    if (!(events !== null && events !== void 0 && events.length)) {
      return [];
    }

    return events.filter(eventDay => day.isSame(eventDay.date, 'day'));
  };

  const momentDate = getMomentDate(currentDate);
  return createElement("div", {
    className: "components-datetime__date",
    ref: nodeRef
  }, createElement(DayPickerSingleDateController, {
    date: momentDate,
    initialVisibleMonth: null,
    daySize: 30,
    horizontalMonthPadding: 0,
    focused: true,
    hideKeyboardShortcutsPanel: true // This is a hack to force the calendar to update on month or year change
    // https://github.com/airbnb/react-dates/issues/240#issuecomment-361776665
    ,
    key: `datepicker-controller-${momentDate ? momentDate.format('MM-YYYY') : 'null'}`,
    noBorder: true,
    numberOfMonths: 1,
    onDateChange: onChangeMoment,
    transitionDuration: 0,
    weekDayFormat: "ddd",
    dayAriaLabelFormat: ARIAL_LABEL_TIME_FORMAT,
    isRTL: isRTL(),
    isOutsideRange: date => {
      return !!isInvalidDate && isInvalidDate(date.toDate());
    },
    firstDayOfWeek: startOfWeek,
    onPrevMonthClick: onMonthPreviewedHandler,
    onNextMonthClick: onMonthPreviewedHandler,
    renderDayContents: day => createElement(DatePickerDay, {
      day: day,
      events: getEventsPerDay(day)
    }),
    renderMonthElement: _ref3 => {
      let {
        month
      } = _ref3;
      return createElement(Fragment, null, createElement("strong", null, month.format('MMMM')), ' ', month.format('YYYY'));
    },
    renderNavPrevButton: _ref4 => {
      let {
        ariaLabel,
        ...props
      } = _ref4;
      return createElement(NavPrevButton, _extends({
        icon: arrowLeft,
        variant: "tertiary",
        "aria-label": ariaLabel
      }, props));
    },
    renderNavNextButton: _ref5 => {
      let {
        ariaLabel,
        ...props
      } = _ref5;
      return createElement(NavNextButton, _extends({
        icon: arrowRight,
        variant: "tertiary",
        "aria-label": ariaLabel
      }, props));
    },
    onFocusChange: noop
  }));
}
export default DatePicker;
//# sourceMappingURL=index.js.map