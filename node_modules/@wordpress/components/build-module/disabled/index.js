import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useDisabled } from '@wordpress/compose';
import { createContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { StyledWrapper } from './styles/disabled-styles';
const Context = createContext(false);
const {
  Consumer,
  Provider
} = Context;
/**
 * @typedef OwnProps
 * @property {string}                    [className]       Classname for the disabled element.
 * @property {import('react').ReactNode} children          Children to disable.
 * @property {boolean}                   [isDisabled=true] Whether to disable the children.
 */

/**
 * @param {OwnProps & import('react').HTMLAttributes<HTMLDivElement>} props
 * @return {JSX.Element} Element wrapping the children to disable them when isDisabled is true.
 */

function Disabled(_ref) {
  let {
    className,
    children,
    isDisabled = true,
    ...props
  } = _ref;

  /** @type {import('react').RefCallback<HTMLDivElement>} */
  const ref = useDisabled();

  if (!isDisabled) {
    return createElement(Provider, {
      value: false
    }, children);
  }

  return createElement(Provider, {
    value: true
  }, createElement(StyledWrapper, _extends({
    ref: ref,
    className: classnames(className, 'components-disabled')
  }, props), children));
}

Disabled.Context = Context;
Disabled.Consumer = Consumer;
export default Disabled;
//# sourceMappingURL=index.js.map