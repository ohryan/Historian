"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InsertionPointOpenRef = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _store = require("../../store");

var _useBlockRefs = require("../block-list/use-block-props/use-block-refs");

var _usePopoverScroll = _interopRequireDefault(require("./use-popover-scroll"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const InsertionPointOpenRef = (0, _element.createContext)();
exports.InsertionPointOpenRef = InsertionPointOpenRef;

function BlockPopoverInbetween(_ref) {
  let {
    previousClientId,
    nextClientId,
    children,
    __unstablePopoverSlot,
    __unstableContentRef,
    ...props
  } = _ref;
  const {
    orientation,
    rootClientId,
    isVisible
  } = (0, _data.useSelect)(select => {
    var _getBlockListSettings;

    const {
      getBlockListSettings,
      getBlockRootClientId,
      isBlockVisible
    } = select(_store.store);

    const _rootClientId = getBlockRootClientId(previousClientId);

    return {
      orientation: ((_getBlockListSettings = getBlockListSettings(_rootClientId)) === null || _getBlockListSettings === void 0 ? void 0 : _getBlockListSettings.orientation) || 'vertical',
      rootClientId: _rootClientId,
      isVisible: isBlockVisible(previousClientId) && isBlockVisible(nextClientId)
    };
  }, [previousClientId]);
  const previousElement = (0, _useBlockRefs.__unstableUseBlockElement)(previousClientId);
  const nextElement = (0, _useBlockRefs.__unstableUseBlockElement)(nextClientId);
  const isVertical = orientation === 'vertical';
  const style = (0, _element.useMemo)(() => {
    if (!previousElement && !nextElement || !isVisible) {
      return {};
    }

    const previousRect = previousElement ? previousElement.getBoundingClientRect() : null;
    const nextRect = nextElement ? nextElement.getBoundingClientRect() : null;

    if (isVertical) {
      return {
        width: previousElement ? previousElement.offsetWidth : nextElement.offsetWidth,
        height: nextRect && previousRect ? nextRect.top - previousRect.bottom : 0
      };
    }

    let width = 0;

    if (previousRect && nextRect) {
      width = (0, _i18n.isRTL)() ? previousRect.left - nextRect.right : nextRect.left - previousRect.right;
    }

    return {
      width,
      height: previousElement ? previousElement.offsetHeight : nextElement.offsetHeight
    };
  }, [previousElement, nextElement, isVertical]);
  const getAnchorRect = (0, _element.useCallback)(() => {
    if (!previousElement && !nextElement || !isVisible) {
      return {};
    }

    const {
      ownerDocument
    } = previousElement || nextElement;
    const previousRect = previousElement ? previousElement.getBoundingClientRect() : null;
    const nextRect = nextElement ? nextElement.getBoundingClientRect() : null;

    if (isVertical) {
      if ((0, _i18n.isRTL)()) {
        return {
          top: previousRect ? previousRect.bottom : nextRect.top,
          left: previousRect ? previousRect.right : nextRect.right,
          right: previousRect ? previousRect.left : nextRect.left,
          bottom: nextRect ? nextRect.top : previousRect.bottom,
          height: 0,
          width: 0,
          ownerDocument
        };
      }

      return {
        top: previousRect ? previousRect.bottom : nextRect.top,
        left: previousRect ? previousRect.left : nextRect.left,
        right: previousRect ? previousRect.right : nextRect.right,
        bottom: nextRect ? nextRect.top : previousRect.bottom,
        height: 0,
        width: 0,
        ownerDocument
      };
    }

    if ((0, _i18n.isRTL)()) {
      return {
        top: previousRect ? previousRect.top : nextRect.top,
        left: previousRect ? previousRect.left : nextRect.right,
        right: nextRect ? nextRect.right : previousRect.left,
        bottom: previousRect ? previousRect.bottom : nextRect.bottom,
        height: 0,
        width: 0,
        ownerDocument
      };
    }

    return {
      top: previousRect ? previousRect.top : nextRect.top,
      left: previousRect ? previousRect.right : nextRect.left,
      right: nextRect ? nextRect.left : previousRect.right,
      bottom: previousRect ? previousRect.bottom : nextRect.bottom,
      height: 0,
      width: 0,
      ownerDocument
    };
  }, [previousElement, nextElement]);
  const popoverScrollRef = (0, _usePopoverScroll.default)(__unstableContentRef);

  if (!previousElement || !nextElement || !isVisible) {
    return null;
  }
  /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
  // While ideally it would be enough to capture the
  // bubbling focus event from the Inserter, due to the
  // characteristics of click focusing of `button`s in
  // Firefox and Safari, it is not reliable.
  //
  // See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus


  return (0, _element.createElement)(_components.Popover, (0, _extends2.default)({
    ref: popoverScrollRef,
    animate: false,
    getAnchorRect: getAnchorRect,
    focusOnMount: false // Render in the old slot if needed for backward compatibility,
    // otherwise render in place (not in the the default popover slot).
    ,
    __unstableSlotName: __unstablePopoverSlot || null // Forces a remount of the popover when its position changes
    // This makes sure the popover doesn't animate from its previous position.
    ,
    key: nextClientId + '--' + rootClientId
  }, props, {
    className: (0, _classnames.default)('block-editor-block-popover', props.className),
    __unstableForcePosition: true
  }), (0, _element.createElement)("div", {
    style: style
  }, children));
  /* eslint-enable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
}

var _default = BlockPopoverInbetween;
exports.default = _default;
//# sourceMappingURL=inbetween.js.map