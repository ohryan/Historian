import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { debounce } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useState, useLayoutEffect } from '@wordpress/element';
import { useViewportMatch } from '@wordpress/compose';
import { Button, __experimentalText as Text, Slot, Fill } from '@wordpress/components';
/**
 * Internal dependencies
 */

import BlockStylesPreviewPanel from './preview-panel';
import useStylesForBlocks from './use-styles-for-block';

function BlockStylesPreviewPanelSlot(_ref) {
  let {
    scope
  } = _ref;
  return createElement(Slot, {
    name: `BlockStylesPreviewPanel/${scope}`
  });
}

function BlockStylesPreviewPanelFill(_ref2) {
  let {
    children,
    scope,
    ...props
  } = _ref2;
  return createElement(Fill, {
    name: `BlockStylesPreviewPanel/${scope}`
  }, createElement("div", props, children));
} // Top position (in px) of the Block Styles container
// relative to the editor pane.
// The value is the equivalent of the container's right position.


const DEFAULT_POSITION_TOP = 16;

const noop = () => {}; // Block Styles component for the Settings Sidebar.


function BlockStyles(_ref3) {
  let {
    clientId,
    onSwitch = noop,
    onHoverClassName = noop,
    scope
  } = _ref3;
  const {
    onSelect,
    stylesToRender,
    activeStyle,
    genericPreviewBlock,
    className: previewClassName
  } = useStylesForBlocks({
    clientId,
    onSwitch
  });
  const [hoveredStyle, setHoveredStyle] = useState(null);
  const [containerScrollTop, setContainerScrollTop] = useState(0);
  const isMobileViewport = useViewportMatch('medium', '<');
  useLayoutEffect(() => {
    const scrollContainer = document.querySelector('.interface-interface-skeleton__content');
    const scrollTop = (scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.scrollTop) || 0;
    setContainerScrollTop(scrollTop + DEFAULT_POSITION_TOP);
  }, [hoveredStyle]);

  if (!stylesToRender || stylesToRender.length === 0) {
    return null;
  }

  const debouncedSetHoveredStyle = debounce(setHoveredStyle, 250);

  const onSelectStylePreview = style => {
    onSelect(style);
    onHoverClassName(null);
    setHoveredStyle(null);
    debouncedSetHoveredStyle.cancel();
  };

  const styleItemHandler = item => {
    var _item$name;

    if (hoveredStyle === item) {
      debouncedSetHoveredStyle.cancel();
      return;
    }

    debouncedSetHoveredStyle(item);
    onHoverClassName((_item$name = item === null || item === void 0 ? void 0 : item.name) !== null && _item$name !== void 0 ? _item$name : null);
  };

  return createElement("div", {
    className: "block-editor-block-styles"
  }, createElement("div", {
    className: "block-editor-block-styles__variants"
  }, stylesToRender.map(style => {
    const buttonText = style.label || style.name;
    return createElement(Button, {
      className: classnames('block-editor-block-styles__item', {
        'is-active': activeStyle.name === style.name
      }),
      key: style.name,
      variant: "secondary",
      label: buttonText,
      onMouseEnter: () => styleItemHandler(style),
      onFocus: () => styleItemHandler(style),
      onMouseLeave: () => styleItemHandler(null),
      onBlur: () => styleItemHandler(null),
      onClick: () => onSelectStylePreview(style),
      "aria-current": activeStyle.name === style.name
    }, createElement(Text, {
      as: "span",
      limit: 12,
      ellipsizeMode: "tail",
      className: "block-editor-block-styles__item-text",
      truncate: true
    }, buttonText));
  })), hoveredStyle && !isMobileViewport && createElement(BlockStylesPreviewPanelFill, {
    scope: scope,
    className: "block-editor-block-styles__preview-panel",
    style: {
      top: containerScrollTop
    },
    onMouseLeave: () => styleItemHandler(null)
  }, createElement(BlockStylesPreviewPanel, {
    activeStyle: activeStyle,
    className: previewClassName,
    genericPreviewBlock: genericPreviewBlock,
    style: hoveredStyle
  })));
}

BlockStyles.Slot = BlockStylesPreviewPanelSlot;
export default BlockStyles;
//# sourceMappingURL=index.js.map