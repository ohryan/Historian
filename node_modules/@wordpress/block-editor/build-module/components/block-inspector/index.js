import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { getBlockType, getUnregisteredTypeHandlerName, hasBlockSupport, store as blocksStore } from '@wordpress/blocks';
import { PanelBody, __experimentalUseSlot as useSlot } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import SkipToSelectedBlock from '../skip-to-selected-block';
import BlockCard from '../block-card';
import { default as InspectorControls, InspectorAdvancedControls } from '../inspector-controls';
import BlockStyles from '../block-styles';
import MultiSelectionInspector from '../multi-selection-inspector';
import DefaultStylePicker from '../default-style-picker';
import BlockVariationTransforms from '../block-variation-transforms';
import useBlockDisplayInformation from '../use-block-display-information';
import { store as blockEditorStore } from '../../store';

const BlockInspector = _ref => {
  let {
    showNoBlockSelectedMessage = true
  } = _ref;
  const {
    count,
    hasBlockStyles,
    selectedBlockName,
    selectedBlockClientId,
    blockType
  } = useSelect(select => {
    const {
      getSelectedBlockClientId,
      getSelectedBlockCount,
      getBlockName
    } = select(blockEditorStore);
    const {
      getBlockStyles
    } = select(blocksStore);

    const _selectedBlockClientId = getSelectedBlockClientId();

    const _selectedBlockName = _selectedBlockClientId && getBlockName(_selectedBlockClientId);

    const _blockType = _selectedBlockName && getBlockType(_selectedBlockName);

    const blockStyles = _selectedBlockName && getBlockStyles(_selectedBlockName);

    return {
      count: getSelectedBlockCount(),
      selectedBlockClientId: _selectedBlockClientId,
      selectedBlockName: _selectedBlockName,
      blockType: _blockType,
      hasBlockStyles: blockStyles && blockStyles.length > 0
    };
  }, []);

  if (count > 1) {
    return createElement("div", {
      className: "block-editor-block-inspector"
    }, createElement(MultiSelectionInspector, null), createElement(InspectorControls.Slot, null), createElement(InspectorControls.Slot, {
      __experimentalGroup: "color",
      label: __('Color'),
      className: "color-block-support-panel__inner-wrapper"
    }), createElement(InspectorControls.Slot, {
      __experimentalGroup: "typography",
      label: __('Typography')
    }), createElement(InspectorControls.Slot, {
      __experimentalGroup: "dimensions",
      label: __('Dimensions')
    }), createElement(InspectorControls.Slot, {
      __experimentalGroup: "border",
      label: __('Border')
    }));
  }

  const isSelectedBlockUnregistered = selectedBlockName === getUnregisteredTypeHandlerName();
  /*
   * If the selected block is of an unregistered type, avoid showing it as an actual selection
   * because we want the user to focus on the unregistered block warning, not block settings.
   */

  if (!blockType || !selectedBlockClientId || isSelectedBlockUnregistered) {
    if (showNoBlockSelectedMessage) {
      return createElement("span", {
        className: "block-editor-block-inspector__no-blocks"
      }, __('No block selected.'));
    }

    return null;
  }

  return createElement(BlockInspectorSingleBlock, {
    clientId: selectedBlockClientId,
    blockName: blockType.name,
    hasBlockStyles: hasBlockStyles
  });
};

const BlockInspectorSingleBlock = _ref2 => {
  let {
    clientId,
    blockName,
    hasBlockStyles
  } = _ref2;
  const blockInformation = useBlockDisplayInformation(clientId);
  return createElement("div", {
    className: "block-editor-block-inspector"
  }, createElement(BlockCard, blockInformation), createElement(BlockVariationTransforms, {
    blockClientId: clientId
  }), hasBlockStyles && createElement("div", null, createElement(PanelBody, {
    title: __('Styles')
  }, createElement(BlockStyles, {
    scope: "core/block-inspector",
    clientId: clientId
  }), hasBlockSupport(blockName, 'defaultStylePicker', true) && createElement(DefaultStylePicker, {
    blockName: blockName
  }))), createElement(InspectorControls.Slot, null), createElement(InspectorControls.Slot, {
    __experimentalGroup: "color",
    label: __('Color'),
    className: "color-block-support-panel__inner-wrapper"
  }), createElement(InspectorControls.Slot, {
    __experimentalGroup: "typography",
    label: __('Typography')
  }), createElement(InspectorControls.Slot, {
    __experimentalGroup: "dimensions",
    label: __('Dimensions')
  }), createElement(InspectorControls.Slot, {
    __experimentalGroup: "border",
    label: __('Border')
  }), createElement("div", null, createElement(AdvancedControls, null)), createElement(SkipToSelectedBlock, {
    key: "back"
  }));
};

const AdvancedControls = () => {
  const slot = useSlot(InspectorAdvancedControls.slotName);
  const hasFills = Boolean(slot.fills && slot.fills.length);

  if (!hasFills) {
    return null;
  }

  return createElement(PanelBody, {
    className: "block-editor-block-inspector__advanced",
    title: __('Advanced'),
    initialOpen: false
  }, createElement(InspectorControls.Slot, {
    __experimentalGroup: "advanced"
  }));
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-inspector/README.md
 */


export default BlockInspector;
//# sourceMappingURL=index.js.map