import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { Platform, useMemo, useRef, useState, useEffect } from '@wordpress/element';
import { getBlockSupport } from '@wordpress/blocks';
import { __experimentalUseCustomUnits as useCustomUnits, __experimentalBoxControl as BoxControl } from '@wordpress/components';
import isShallowEqual from '@wordpress/is-shallow-equal';
/**
 * Internal dependencies
 */

import useSetting from '../components/use-setting';
import { AXIAL_SIDES, SPACING_SUPPORT_KEY, useCustomSides, useIsDimensionsSupportValid } from './dimensions';
import { cleanEmptyObject } from './utils';
import BlockPopover from '../components/block-popover';
/**
 * Determines if there is margin support.
 *
 * @param {string|Object} blockType Block name or Block Type object.
 *
 * @return {boolean} Whether there is support.
 */

export function hasMarginSupport(blockType) {
  const support = getBlockSupport(blockType, SPACING_SUPPORT_KEY);
  return !!(true === support || support !== null && support !== void 0 && support.margin);
}
/**
 * Checks if there is a current value in the margin block support attributes.
 *
 * @param {Object} props Block props.
 * @return {boolean}      Whether or not the block has a margin value set.
 */

export function hasMarginValue(props) {
  var _props$attributes$sty, _props$attributes$sty2;

  return ((_props$attributes$sty = props.attributes.style) === null || _props$attributes$sty === void 0 ? void 0 : (_props$attributes$sty2 = _props$attributes$sty.spacing) === null || _props$attributes$sty2 === void 0 ? void 0 : _props$attributes$sty2.margin) !== undefined;
}
/**
 * Resets the margin block support attributes. This can be used when disabling
 * the margin support controls for a block via a `ToolsPanel`.
 *
 * @param {Object} props               Block props.
 * @param {Object} props.attributes    Block's attributes.
 * @param {Object} props.setAttributes Function to set block's attributes.
 */

export function resetMargin(_ref) {
  let {
    attributes = {},
    setAttributes
  } = _ref;
  const {
    style
  } = attributes;
  setAttributes({
    style: cleanEmptyObject({ ...style,
      spacing: { ...(style === null || style === void 0 ? void 0 : style.spacing),
        margin: undefined
      }
    })
  });
}
/**
 * Custom hook that checks if margin settings have been disabled.
 *
 * @param {string} name The name of the block.
 *
 * @return {boolean} Whether margin setting is disabled.
 */

export function useIsMarginDisabled() {
  let {
    name: blockName
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const isDisabled = !useSetting('spacing.margin');
  const isInvalid = !useIsDimensionsSupportValid(blockName, 'margin');
  return !hasMarginSupport(blockName) || isDisabled || isInvalid;
}
/**
 * Inspector control panel containing the margin related configuration
 *
 * @param {Object} props Block props.
 *
 * @return {WPElement} Margin edit element.
 */

export function MarginEdit(props) {
  var _style$spacing;

  const {
    name: blockName,
    attributes: {
      style
    },
    setAttributes
  } = props;
  const units = useCustomUnits({
    availableUnits: useSetting('spacing.units') || ['%', 'px', 'em', 'rem', 'vw']
  });
  const sides = useCustomSides(blockName, 'margin');
  const splitOnAxis = sides && sides.some(side => AXIAL_SIDES.includes(side));

  if (useIsMarginDisabled(props)) {
    return null;
  }

  const onChange = next => {
    const newStyle = { ...style,
      spacing: { ...(style === null || style === void 0 ? void 0 : style.spacing),
        margin: next
      }
    };
    setAttributes({
      style: cleanEmptyObject(newStyle)
    });
  };

  return Platform.select({
    web: createElement(Fragment, null, createElement(BoxControl, {
      values: style === null || style === void 0 ? void 0 : (_style$spacing = style.spacing) === null || _style$spacing === void 0 ? void 0 : _style$spacing.margin,
      onChange: onChange,
      label: __('Margin'),
      sides: sides,
      units: units,
      allowReset: false,
      splitOnAxis: splitOnAxis
    })),
    native: null
  });
}
export function MarginVisualizer(_ref2) {
  var _attributes$style, _attributes$style$spa;

  let {
    clientId,
    attributes
  } = _ref2;
  const margin = attributes === null || attributes === void 0 ? void 0 : (_attributes$style = attributes.style) === null || _attributes$style === void 0 ? void 0 : (_attributes$style$spa = _attributes$style.spacing) === null || _attributes$style$spa === void 0 ? void 0 : _attributes$style$spa.margin;
  const style = useMemo(() => {
    var _margin$top, _margin$right, _margin$bottom, _margin$left;

    return {
      borderTopWidth: (_margin$top = margin === null || margin === void 0 ? void 0 : margin.top) !== null && _margin$top !== void 0 ? _margin$top : 0,
      borderRightWidth: (_margin$right = margin === null || margin === void 0 ? void 0 : margin.right) !== null && _margin$right !== void 0 ? _margin$right : 0,
      borderBottomWidth: (_margin$bottom = margin === null || margin === void 0 ? void 0 : margin.bottom) !== null && _margin$bottom !== void 0 ? _margin$bottom : 0,
      borderLeftWidth: (_margin$left = margin === null || margin === void 0 ? void 0 : margin.left) !== null && _margin$left !== void 0 ? _margin$left : 0,
      top: margin !== null && margin !== void 0 && margin.top ? `-${margin.top}` : 0,
      right: margin !== null && margin !== void 0 && margin.right ? `-${margin.right}` : 0,
      bottom: margin !== null && margin !== void 0 && margin.bottom ? `-${margin.bottom}` : 0,
      left: margin !== null && margin !== void 0 && margin.left ? `-${margin.left}` : 0
    };
  }, [margin]);
  const [isActive, setIsActive] = useState(false);
  const valueRef = useRef(margin);
  const timeoutRef = useRef();

  const clearTimer = () => {
    if (timeoutRef.current) {
      window.clearTimeout(timeoutRef.current);
    }
  };

  useEffect(() => {
    if (!isShallowEqual(margin, valueRef.current)) {
      setIsActive(true);
      valueRef.current = margin;
      clearTimer();
      timeoutRef.current = setTimeout(() => {
        setIsActive(false);
      }, 400);
    }

    return () => clearTimer();
  }, [margin]);

  if (!isActive) {
    return null;
  }

  return createElement(BlockPopover, {
    clientId: clientId,
    __unstableCoverTarget: true,
    __unstableRefreshSize: margin
  }, createElement("div", {
    className: "block-editor__padding-visualizer",
    style: style
  }));
}
//# sourceMappingURL=margin.js.map